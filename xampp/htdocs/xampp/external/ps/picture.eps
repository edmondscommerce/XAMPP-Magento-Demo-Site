%!PS-Adobe-2.0 EPSF-2.0
%%Title: test.fig
%%Creator: fig2dev Version 3.2 Patchlevel 4
%%CreationDate: Tue Feb  3 16:50:34 2004
%%For: steinm@pb.steinmann.cx (Uwe Steinmann,,,)
%%BoundingBox: 0 0 271 243
%%Magnification: 1.0000
%%EndComments
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 243 moveto 0 0 lineto 271 0 lineto 271 243 lineto closepath clip newpath
-131.9 356.2 translate
1 -1 scale

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index oldshow	% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proc char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% right-shingles
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 48 48 true [ 48 0 0 -48 0 48 ]
	{<000000000080000000000080000000000040000000000040
	000000000020000000000020000000000010000000000010
	000000000008000000000008000000000004000000000004
	000000000002000000000002000000000001ffffffffffff
	008000000000008000000000004000000000004000000000
	002000000000002000000000001000000000001000000000
	000800000000000800000000000400000000000400000000
	000200000000000200000000000100000000ffffffffffff
	000000800000000000800000000000400000000000400000
	000000200000000000200000000000100000000000100000
	000000080000000000080000000000040000000000040000
	000000020000000000020000000000010000ffffffffffff>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P13 exch def

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06299 0.06299 sc
%
% Fig objects follow
%
% 
% here starts figure with depth 50
% Polyline
45.000 slw
n 4290 4095 m 4185 4095 4185 4890 105 arcto 4 {pop} repeat
  4185 4995 5070 4995 105 arcto 4 {pop} repeat
  5175 4995 5175 4200 105 arcto 4 {pop} repeat
  5175 4095 4290 4095 105 arcto 4 {pop} repeat
 cp gs col1 1.00 shd ef gr gs col27 s gr 
% Polyline
7.500 slw
n 3690 3195 m 5715 3195 l 5715 3960 l 3690 3960 l
 cp gs col0 s gr 
% Polyline
2 slj
45.000 slw
n 6345 2970 m 6344 2969 l 6340 2968 l 6334 2964 l 6325 2959 l 6311 2952 l
 6292 2942 l 6269 2930 l 6240 2915 l 6205 2897 l 6165 2876 l
 6119 2852 l 6069 2826 l 6013 2798 l 5954 2767 l 5891 2734 l
 5824 2700 l 5755 2665 l 5685 2629 l 5613 2592 l 5540 2555 l
 5467 2519 l 5395 2482 l 5323 2446 l 5253 2411 l 5184 2377 l
 5117 2344 l 5052 2313 l 4989 2282 l 4928 2253 l 4869 2225 l
 4812 2198 l 4757 2173 l 4705 2149 l 4654 2126 l 4605 2105 l
 4559 2084 l 4514 2065 l 4470 2047 l 4428 2030 l 4388 2014 l
 4349 2000 l 4310 1986 l 4273 1972 l 4237 1960 l 4202 1949 l
 4167 1938 l 4133 1928 l 4090 1915 l 4048 1904 l 4007 1894 l
 3966 1885 l 3926 1877 l 3885 1869 l 3846 1863 l 3806 1857 l
 3767 1852 l 3727 1849 l 3688 1846 l 3650 1844 l 3611 1843 l
 3573 1843 l 3536 1844 l 3498 1846 l 3461 1849 l 3425 1852 l
 3389 1857 l 3354 1863 l 3319 1869 l 3285 1877 l 3251 1885 l
 3219 1894 l 3187 1904 l 3156 1914 l 3125 1925 l 3096 1937 l
 3067 1949 l 3039 1962 l 3011 1976 l 2985 1990 l 2958 2005 l
 2933 2020 l 2908 2035 l 2883 2051 l 2859 2068 l 2835 2085 l
 2810 2104 l 2785 2123 l 2760 2143 l 2735 2164 l 2710 2186 l
 2685 2209 l 2660 2233 l 2636 2257 l 2611 2283 l 2586 2310 l
 2562 2338 l 2537 2367 l 2513 2397 l 2490 2428 l 2466 2460 l
 2443 2493 l 2421 2527 l 2399 2562 l 2378 2597 l 2357 2633 l
 2337 2669 l 2318 2707 l 2300 2744 l 2283 2782 l 2267 2820 l
 2252 2859 l 2237 2897 l 2224 2936 l 2212 2975 l 2200 3015 l
 2190 3054 l 2180 3094 l 2172 3133 l 2165 3174 l 2158 3214 l
 2153 3255 l 2148 3292 l 2145 3330 l 2142 3369 l 2140 3408 l
 2138 3448 l 2138 3489 l 2138 3531 l 2138 3574 l 2140 3617 l
 2142 3661 l 2145 3706 l 2149 3752 l 2154 3798 l 2159 3845 l
 2165 3892 l 2172 3940 l 2180 3988 l 2188 4037 l 2197 4085 l
 2207 4134 l 2217 4182 l 2228 4230 l 2240 4278 l 2252 4326 l
 2265 4373 l 2278 4419 l 2292 4465 l 2306 4510 l 2321 4554 l
 2336 4598 l 2351 4640 l 2367 4682 l 2383 4722 l 2400 4762 l
 2417 4800 l 2434 4838 l 2451 4875 l 2469 4911 l 2487 4946 l
 2505 4980 l 2526 5017 l 2547 5054 l 2569 5090 l 2592 5125 l
 2615 5160 l 2638 5194 l 2663 5227 l 2687 5260 l 2712 5291 l
 2738 5322 l 2764 5352 l 2790 5380 l 2816 5408 l 2843 5434 l
 2869 5458 l 2895 5481 l 2921 5502 l 2947 5522 l 2973 5540 l
 2997 5556 l 3022 5570 l 3045 5582 l 3068 5592 l 3090 5600 l
 3111 5605 l 3131 5609 l 3150 5610 l 3168 5610 l 3185 5607 l
 3201 5602 l 3215 5595 l 3228 5586 l 3241 5574 l 3252 5561 l
 3261 5545 l 3270 5528 l 3277 5510 l 3283 5490 l 3288 5468 l
 3292 5445 l 3295 5419 l 3298 5392 l 3300 5363 l 3301 5332 l
 3302 5299 l 3302 5264 l 3301 5227 l 3300 5189 l 3299 5149 l
 3297 5107 l 3294 5064 l 3291 5019 l 3288 4973 l 3285 4926 l
 3281 4878 l 3278 4829 l 3274 4780 l 3270 4729 l 3266 4679 l
 3262 4628 l 3259 4576 l 3255 4525 l 3252 4474 l 3249 4423 l
 3246 4372 l 3244 4322 l 3242 4272 l 3240 4223 l 3239 4175 l
 3238 4127 l 3238 4080 l 3239 4033 l 3240 3988 l 3242 3943 l
 3244 3899 l 3248 3855 l 3251 3814 l 3256 3773 l 3261 3733 l
 3267 3693 l 3274 3653 l 3282 3614 l 3290 3575 l 3300 3536 l
 3310 3497 l 3322 3458 l 3334 3420 l 3347 3382 l 3362 3344 l
 3377 3307 l 3393 3270 l 3411 3234 l 3429 3199 l 3448 3164 l
 3469 3129 l 3490 3096 l 3512 3063 l 3535 3031 l 3559 3001 l
 3584 2971 l 3610 2942 l 3636 2915 l 3663 2889 l 3691 2863 l
 3719 2839 l 3748 2817 l 3778 2795 l 3808 2775 l 3839 2756 l
 3870 2739 l 3902 2722 l 3934 2707 l 3967 2693 l 4000 2680 l
 4034 2668 l 4069 2658 l 4104 2648 l 4140 2640 l 4174 2633 l
 4208 2627 l 4243 2623 l 4279 2619 l 4317 2616 l 4355 2614 l
 4395 2613 l 4437 2613 l 4480 2614 l 4525 2616 l 4572 2619 l
 4621 2623 l 4672 2628 l 4726 2635 l 4781 2642 l 4840 2650 l
 4900 2660 l 4963 2670 l 5029 2681 l 5097 2693 l 5167 2707 l
 5239 2721 l 5313 2735 l 5388 2751 l 5464 2767 l 5541 2783 l
 5617 2800 l 5692 2816 l 5767 2833 l 5839 2849 l 5908 2865 l
 5973 2881 l 6034 2895 l 6090 2908 l 6141 2920 l 6186 2931 l
 6225 2941 l 6258 2949 l 6285 2955 l 6306 2960 l 6322 2964 l
 6333 2967 l 6340 2969 l 6343 2970 l
 6345 2970 l  cp gs /PC [[1.00 0.00 0.00] [0.00 0.56 0.56]] def
15.00 15.00 sc P13 [24 0 0 -24 142.53 122.87] PATmp PATsp ef gr PATusp gs col15 s gr 
/Bookman-Demi ff 270.00 scf sf
3780 3465 m
gs 1 -1 sc (PSLib is cool!) col0 sh gr
% here ends figure;
$F2psEnd
rs
end
showpage
